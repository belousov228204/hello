import pygame
import random

pygame.init()
size = 1000, 1000
screen = pygame.display.set_mode(size)
clock = pygame.time.Clock()


class Board:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.left = 10
        self.top = 10
        self.cell_size = 30

    def set_view(self, left, top, cell_size):
        self.left = left
        self.top = top
        self.cell_size = cell_size

    def render(self):
        for i in range(self.height):
            for j in range(self.width):
                pygame.draw.rect(screen, (255, 255, 255),
                                 (j * self.cell_size + self.left, i * self.cell_size + self.top, self.cell_size,
                                  self.cell_size), 1)

    def on_click(self, cell):
        pass

    def get_cell(self, mouse_pos):
        s = (mouse_pos[0] - self.left) // self.cell_size
        d = (mouse_pos[1] - self.top) // self.cell_size
        if (s > self.width - 1 or d > self.height - 1) or (s < 0 or d < 0):
            return None
        return (s, d)

    def get_click(self, mouse_pos):
        cell = self.get_cell(mouse_pos)
        if cell:
            self.on_click(cell)
        return self.on_click(cell)


class Saper(Board):
    def __init__(self, width, height, n):
        super().__init__(width, height)
        self.board = [[-1] * width for _ in range(height)]

        self.n = n        
        self.w = 0   
        self.e = False
        

    def open_cell(self, cell):
        
        try:
            x, y = cell
        except TypeError:
            return 
        if self.board[y][x] == 10:
            return 12
        if self.e and self.w == 1:
            self.create_field_sex(x, y)

        s = 0
        for i in range(-1, 2):
            for j in range(-1, 2):
                if x + j < 0 or x + j >= self.width or y + i < 0 or y + i >= self.height:
                    continue
                if self.board[y + i][x + j] == 10:
                    s += 1
        if s == 0 and self.w > 1:
            for i in range(-1, 2):
                for j in range(-1, 2):
                    if x + j < 0 or x + j >= self.width or y + i < 0 or y + i >= self.height:
                        continue
                    if self.board[y+i][x+j] == -1:
                        h = 0
                        for k in range(-1, 2):
                            for d in range(-1, 2):
                                if x + j + d < 0 or x + j + d >= self.width or y + i + k < 0 or y + i + k >= self.height:
                                    continue
                                if self.board[y + i + k][x + j + d] == 10:
                                    h += 1
                        if self.board[y + i][x + j] == -1:
                            self.w += 1
                        self.board[y + i][x + j] = h            
        if self.board[y][x] == -1:
            self.w += 1
        self.board[y][x] = s

    def on_click(self, cell):
        self.open_cell(cell)
        return self.open_cell(cell)
    
    def create_field_sex(self, x1, y1):
        i = 0
        while i < self.n:
            x = random.randint(0, self.width - 1)
            y = random.randint(0, self.height - 1)
            x2 = x1 + 2
            if x == x1 and y == y1 or x < x1 + 2 and x > x1 - 2 or y < y1 + 2 and y > y1 - 2:
                continue
            if self.board[y][x] == -1:
                self.board[y][x] = 10
                i += 1
             

    def render(self):
        for i in range(self.height):
            for j in range(self.width):
                if self.board[i][j] == 10:
                    pygame.draw.rect(screen, pygame.Color('black'),
                                     (j * self.cell_size + self.left, i * self.cell_size + self.top, self.cell_size,
                                      self.cell_size))
                if self.board[i][j] >= 0 and self.board[i][j] != 10:
                    font = pygame.font.Font(None, self.cell_size - 6)
                    text = font.render(str(self.board[i][j]), 1, (100, 255, 100))
                    screen.blit(text, (j * self.cell_size + self.left + 3, i * self.cell_size + self.top + 3))

                pygame.draw.rect(screen, pygame.Color(255, 255, 255),
                                 (j * self.cell_size + self.left, i * self.cell_size + self.top, self.cell_size,
                                  self.cell_size), 1)
        if self.w == self.width * self.height - self.n and self.w:
            font = pygame.font.Font(None, 36)
            text = font.render('U WIN!5555', 1, (100, 255, 100))
            screen.blit(text, (250, 750))


class Mouse:
    def __init__(self, x, y):
        self.image = pygame.image.load("arrow.png")
        self.x = x 
        self.y = y

    def render(self):
        if x == -1 or pygame.mouse.get_focused() == False:
            return
        screen.blit(self.image, (self.x, self.y))


board = Saper(10, 15, 20)
board.set_view(10, 10, 30)
mouse1 = Mouse(-1, -1)


time_on = False
ticks = 0
pygame.mouse.set_visible(False)
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN:
            board.get_click(event.pos)
            if board.get_click(event.pos) == 12:
                running = False
            else:
                board.e = True
        if event.type == pygame.MOUSEMOTION:
            x, y = event.pos
            mouse1 = Mouse(x, y)
            
            print(event.pos)
            
    print(board.e)
    print(board.w)
    screen.fill([0, 0, 0])
    board.render()
    mouse1.render()

    pygame.display.flip()
    clock.tick(50)
    ticks += 1

pygame.quit()

